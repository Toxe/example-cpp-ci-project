version: 2.1

orbs:
    win: circleci/windows@4.1.1
    macos: circleci/macos@2.2.0

jobs:
    linux-gcc:
        docker:
            - image: cimg/base:current
        environment:
            CC: gcc-11
            CXX: g++-11
        steps:
            - checkout
            - run:
                  name: Install Software
                  command: |
                      sudo apt-get update
                      sudo apt-get install -y software-properties-common apt-transport-https
                      curl -s https://apt.kitware.com/keys/kitware-archive-latest.asc | sudo apt-key add -
                      sudo apt-add-repository -y 'deb https://apt.kitware.com/ubuntu/ focal main'
                      sudo apt-add-repository -y ppa:ubuntu-toolchain-r/test
                      sudo apt-get update
                      sudo apt-get install -y ninja-build git unzip cmake g++-11 libstdc++-11-dev
            - run: /bin/bash .ci/install-vcpkg.sh
            - run: /bin/bash .ci/build-project.sh
            - run: ./build/src/show_info/show_info
            - run: ./build/src/example/example
            - run: ctest --output-junit test-results.xml --test-dir build
            - store_test_results:
                  path: build/test-results.xml

    linux-clang-libcpp:
        docker:
            - image: cimg/base:current
        environment:
            CC: clang-14
            CXX: clang++-14
            CXXFLAGS: -stdlib=libc++
        steps:
            - checkout
            - run:
                  name: Install Software
                  command: |
                      sudo apt-get update
                      sudo apt-get install -y software-properties-common apt-transport-https
                      curl -s https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
                      curl -s https://apt.kitware.com/keys/kitware-archive-latest.asc | sudo apt-key add -
                      sudo apt-add-repository -y 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-14 main'
                      sudo apt-add-repository -y 'deb https://apt.kitware.com/ubuntu/ focal main'
                      sudo apt-get update
                      sudo apt-get install -y ninja-build git unzip cmake clang-14 libc++-14-dev libc++abi-14-dev
            - run: /bin/bash .ci/install-vcpkg.sh
            - run: /bin/bash .ci/build-project.sh
            - run: ./build/src/show_info/show_info
            - run: ./build/src/example/example
            - run: ctest --output-junit test-results.xml --test-dir build
            - store_test_results:
                  path: build/test-results.xml

    linux-clang-libstdcpp:
        docker:
            - image: cimg/base:current
        environment:
            CC: clang-14
            CXX: clang++-14
            CXXFLAGS: -stdlib=libstdc++
        steps:
            - checkout
            - run:
                  name: Install Software
                  command: |
                      sudo apt-get update
                      sudo apt-get install -y software-properties-common apt-transport-https
                      curl -s https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
                      curl -s https://apt.kitware.com/keys/kitware-archive-latest.asc | sudo apt-key add -
                      sudo apt-add-repository -y 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-14 main'
                      sudo apt-add-repository -y 'deb https://apt.kitware.com/ubuntu/ focal main'
                      sudo apt-add-repository -y ppa:ubuntu-toolchain-r/test
                      sudo apt-get update
                      sudo apt-get install -y ninja-build git unzip cmake clang-14 libc++-14-dev libc++abi-14-dev libstdc++-11-dev
            - run: /bin/bash .ci/install-vcpkg.sh
            - run: /bin/bash .ci/build-project.sh
            - run: ./build/src/show_info/show_info
            - run: ./build/src/example/example
            - run: ctest --output-junit test-results.xml --test-dir build
            - store_test_results:
                  path: build/test-results.xml

    mac-gcc:
        macos:
            xcode: 13.4.1
        environment:
            CC: gcc-12
            CXX: g++-12
        steps:
            - checkout
            - run: brew install cmake ninja pkg-config gcc@12
            - run: /bin/bash .ci/install-vcpkg.sh
            - run: /bin/bash .ci/build-project.sh
            - run: ./build/src/show_info/show_info
            - run: ./build/src/example/example
            - run: ctest --output-junit test-results.xml --test-dir build
            - store_test_results:
                  path: build/test-results.xml

    mac-clang-libcpp:
        macos:
            xcode: 13.4.1
        environment:
            CC: /usr/local/opt/llvm/bin/clang
            CXX: /usr/local/opt/llvm/bin/clang++
            CXXFLAGS: -stdlib=libc++
        steps:
            - checkout
            - run: brew install cmake ninja pkg-config llvm@13
            - run: /bin/bash .ci/install-vcpkg.sh
            - run: /bin/bash .ci/build-project.sh
            - run: ./build/src/show_info/show_info
            - run: ./build/src/example/example
            - run: ctest --output-junit test-results.xml --test-dir build
            - store_test_results:
                  path: build/test-results.xml

    mac-clang-libstdcpp:
        macos:
            xcode: 13.4.1
        environment:
            CC: /usr/local/opt/llvm/bin/clang
            CXX: /usr/local/opt/llvm/bin/clang++
            CXXFLAGS: -stdlib=libstdc++ -I/usr/local/opt/gcc\@12/include/c++/12 -I/usr/local/opt/gcc@12/include/c++/12/x86_64-apple-darwin21
            LDFLAGS: -L/usr/local/opt/gcc\@12/lib/gcc/12 -Wl,-rpath,/usr/local/opt/gcc\@12/lib/gcc/12
        steps:
            - checkout
            - run: brew install cmake ninja pkg-config llvm@13 gcc@12
            - run: /bin/bash .ci/install-vcpkg.sh
            - run: /bin/bash .ci/build-project.sh
            - run: ./build/src/show_info/show_info
            - run: ./build/src/example/example
            - run: ctest --output-junit test-results.xml --test-dir build
            - store_test_results:
                  path: build/test-results.xml

    windows-msvc:
        executor: win/server-2022
        steps:
            - checkout
            - run:
                  name: Install Software
                  command: |
                      choco install -y --no-progress cmake --installargs "ADD_CMAKE_TO_PATH=User"
                      RefreshEnv
            - run: .ci\install-vcpkg.ps1
            - run: .ci\build-project.ps1
            - run: .\build\src\show_info\RelWithDebInfo\show_info.exe
            - run: .\build\src\example\RelWithDebInfo\example.exe
            - run: Invoke-Expression '& $Env:ProgramFiles\CMake\bin\ctest.exe --output-junit test-results.xml --test-dir build'
            - store_test_results:
                  path: build\test-results.xml

    windows-clang-cl:
        executor: win/server-2022
        steps:
            - checkout
            - run:
                  name: Install Software
                  command: |
                      choco install -y --no-progress cmake --installargs "ADD_CMAKE_TO_PATH=User"
                      RefreshEnv
            - run: .ci\install-vcpkg.ps1
            - run: .ci\build-project-with-clang-cl.ps1
            - run: .\build\src\show_info\show_info.exe
            - run: .\build\src\example\example.exe
            - run: Invoke-Expression '& $Env:ProgramFiles\CMake\bin\ctest.exe --output-junit test-results.xml --test-dir build'
            - store_test_results:
                  path: build\test-results.xml

workflows:
    version: 2
    run-all:
        jobs:
            - linux-gcc
            - linux-clang-libcpp
            - linux-clang-libstdcpp
            - mac-gcc
            - mac-clang-libcpp
            - mac-clang-libstdcpp
            - windows-msvc
            - windows-clang-cl
